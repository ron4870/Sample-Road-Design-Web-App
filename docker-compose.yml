version: '3.8'

services:
  #############################################
  # Infrastructure Components
  #############################################
  
  # PostgreSQL with PostGIS extension
  postgres:
    image: postgis/postgis:15-3.3
    container_name: roadapp-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-roadapp}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-roadapp_pw}
      POSTGRES_DB: ${POSTGRES_DB:-roadapp}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-roadapp}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - roadapp-network
  
  # Redis for caching and job queue
  redis:
    image: redis:7-alpine
    container_name: roadapp-redis
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - roadapp-network
  
  # MinIO for object storage (terrain data, 3D models, etc.)
  minio:
    image: minio/minio:RELEASE.2023-06-19T19-52-50Z
    container_name: roadapp-minio
    restart: always
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio_pw}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - roadapp-network
  
  # Keycloak for authentication
  keycloak:
    image: quay.io/keycloak/keycloak:21.1
    container_name: roadapp-keycloak
    restart: always
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-roadapp}
      KC_DB_USERNAME: ${POSTGRES_USER:-roadapp}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-roadapp_pw}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_HOSTNAME_STRICT: "false"
      KC_HTTP_ENABLED: "true"
      KC_PROXY: edge
    command: start-dev
    volumes:
      - keycloak-data:/opt/keycloak/data
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - roadapp-network
  
  # NGINX reverse proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: roadapp-nginx
    restart: always
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/certs:/etc/nginx/certs
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - api-gateway
      - keycloak
      - minio
    networks:
      - roadapp-network
  
  #############################################
  # Core Services
  #############################################
  
  # Frontend React SPA
  frontend:
    image: roadapp/frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: roadapp-frontend
    restart: always
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      REACT_APP_API_URL: ${PUBLIC_URL:-http://localhost}/api
      REACT_APP_AUTH_URL: ${PUBLIC_URL:-http://localhost}/auth
      REACT_APP_MINIO_URL: ${PUBLIC_URL:-http://localhost}/minio
    volumes:
      - ./logs/frontend:/app/logs
    networks:
      - roadapp-network
  
  # API Gateway (NestJS)
  api-gateway:
    image: roadapp/api-gateway:latest
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: roadapp-api-gateway
    restart: always
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 4000
      JWT_SECRET: ${JWT_SECRET:-change-me-now}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-roadapp}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-roadapp_pw}
      DB_NAME: ${POSTGRES_DB:-roadapp}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minio}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minio_pw}
      KEYCLOAK_URL: http://keycloak:8080
      KEYCLOAK_REALM: roadapp
      KEYCLOAK_CLIENT_ID: roadapp-api
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET:-}
    volumes:
      - ./logs/api-gateway:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - roadapp-network
  
  # Alignment Engine (Go)
  alignment-engine:
    image: roadapp/alignment-engine:latest
    build:
      context: ./services/alignment-engine
      dockerfile: Dockerfile
    container_name: roadapp-alignment-engine
    restart: always
    environment:
      PORT: 8081
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-roadapp}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-roadapp_pw}
      DB_NAME: ${POSTGRES_DB:-roadapp}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      LOG_LEVEL: info
    volumes:
      - ./logs/alignment-engine:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - roadapp-network
  
  # 3D Model Service (Rust/WASM)
  model-service:
    image: roadapp/model-service:latest
    build:
      context: ./services/model-service
      dockerfile: Dockerfile
    container_name: roadapp-model-service
    restart: always
    environment:
      PORT: 8082
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minio}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minio_pw}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      LOG_LEVEL: info
    volumes:
      - ./logs/model-service:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - roadapp-network
  
  # Terrain Service (Python GDAL)
  terrain-service:
    image: roadapp/terrain-service:latest
    build:
      context: ./services/terrain-service
      dockerfile: Dockerfile
    container_name: roadapp-terrain-service
    restart: always
    environment:
      PORT: 8083
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-roadapp}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-roadapp_pw}
      DB_NAME: ${POSTGRES_DB:-roadapp}
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minio}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minio_pw}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      LOG_LEVEL: info
    volumes:
      - ./logs/terrain-service:/app/logs
      - terrain-cache:/tmp/terrain-cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - roadapp-network
  
  # Cost Estimator (Python)
  cost-estimator:
    image: roadapp/cost-estimator:latest
    build:
      context: ./services/cost-estimator
      dockerfile: Dockerfile
    container_name: roadapp-cost-estimator
    restart: always
    environment:
      PORT: 8084
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-roadapp}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-roadapp_pw}
      DB_NAME: ${POSTGRES_DB:-roadapp}
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minio}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minio_pw}
      LOG_LEVEL: info
    volumes:
      - ./logs/cost-estimator:/app/logs
      - ./reports:/app/reports
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - roadapp-network
  
  #############################################
  # Advanced Modules
  #############################################
  
  # Junction Engine (Go)
  junction-engine:
    image: roadapp/junction-engine:latest
    build:
      context: ./services/junction-engine
      dockerfile: Dockerfile
    container_name: roadapp-junction-engine
    restart: always
    environment:
      PORT: 8085
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-roadapp}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-roadapp_pw}
      DB_NAME: ${POSTGRES_DB:-roadapp}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      LOG_LEVEL: info
    volumes:
      - ./logs/junction-engine:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - roadapp-network
  
  # Signage Engine (Go)
  signage-engine:
    image: roadapp/signage-engine:latest
    build:
      context: ./services/signage-engine
      dockerfile: Dockerfile
    container_name: roadapp-signage-engine
    restart: always
    environment:
      PORT: 8086
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-roadapp}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-roadapp_pw}
      DB_NAME: ${POSTGRES_DB:-roadapp}
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minio}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minio_pw}
      LOG_LEVEL: info
    volumes:
      - ./logs/signage-engine:/app/logs
      - signage-assets:/app/assets
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - roadapp-network
  
  # Drainage Suite (Python/Rust)
  drainage-suite:
    image: roadapp/drainage-suite:latest
    build:
      context: ./services/drainage-suite
      dockerfile: Dockerfile
    container_name: roadapp-drainage-suite
    restart: always
    environment:
      PORT: 8087
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-roadapp}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-roadapp_pw}
      DB_NAME: ${POSTGRES_DB:-roadapp}
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minio}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minio_pw}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      LOG_LEVEL: info
      ENABLE_GPU: ${ENABLE_GPU:-false}
    volumes:
      - ./logs/drainage-suite:/app/logs
      - drainage-data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - roadapp-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
              device_ids: ['0']
  
  # Grading Engine (C++/Go)
  grading-engine:
    image: roadapp/grading-engine:latest
    build:
      context: ./services/grading-engine
      dockerfile: Dockerfile
    container_name: roadapp-grading-engine
    restart: always
    environment:
      PORT: 8088
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-roadapp}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-roadapp_pw}
      DB_NAME: ${POSTGRES_DB:-roadapp}
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minio}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minio_pw}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      LOG_LEVEL: info
    volumes:
      - ./logs/grading-engine:/app/logs
      - grading-cache:/tmp/grading-cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - roadapp-network

networks:
  roadapp-network:
    driver: bridge

volumes:
  pgdata:
  redis-data:
  minio-data:
  keycloak-data:
  terrain-cache:
  signage-assets:
  drainage-data:
  grading-cache:
